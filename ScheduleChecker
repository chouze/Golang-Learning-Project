package main

import "fmt"

//Structure to hold information about an employee
type Employee struct{
	name byte
	phone int
	computer int
	network int
}

//Main function, called when program is run
func main() {
	assignment, employees := readLists()
	
	if(jobsOk(assignment, employees)){
		fmt.Print("Acceptable")
	} else{
		fmt.Print("Not Acceptable")
	}
}

//Function to determine whether a schedule is acceptable or not
//assignment is a two dimensional array of bytes (used like characters)
//employees is a slice of Employee structures
//this function returns a bool indicating whether the schedule is acceptable
func jobsOk(assignment [4][4]byte, employees []Employee) (bool){
	return noDupes(assignment) && skillsOk(assignment, employees)

}


func noDupes(assignment [4][4]byte) (bool){

	//Flattens the schedule for easier use
	flatSchedule := make([]byte, 4)
	copy(flatSchedule, assignment[0][:])
	for i := 1; i < 4; i++{
		flatSchedule = append(flatSchedule, assignment[i][:]...)
	}
	
	//Checks each name against the rest of the names in the list
	for i, name := range flatSchedule{
		if(contains(flatSchedule[i + 1:], name)){
			return false
		}
	}
	
	return true
}


func contains(schedule []byte, employee byte) bool {
	//For each loop
    	for _, e := range schedule {
		if (e == employee) {
			return true
		}
	}
	return false
}


func skillsOk(assignment [4][4]byte, employees []Employee) (bool){
	for i := 0; i < 4; i++{
		if(!(findEmployee(employees, assignment[i][0]).phone == 1 &&
		findEmployee(employees, assignment[i][1]).phone == 1 &&
		findEmployee(employees, assignment[i][2]).computer == 1 &&
		findEmployee(employees, assignment[i][3]).network == 1)){
			return false
		}
	}
	return true
}


func findEmployee(employees []Employee, name byte)(Employee){
	for _, employee := range employees {
		if (employee.name == name){
			return employee
		}
	}
	//Dummy variable to return if the employee couldn't be found
	var empty = Employee{'x', -1, -1, -1}
	return empty
}


func readLists () ([4][4]byte, []Employee){

	var shift = [4][4]byte{
	{'a', 'b', 'c', 'd'},
	{'e', 'f', 'g', 'h'},
	{'i', 'j', 'k', 'l'},
	{'m', 'n', 'o', 'p'}}
	
	var employees = []Employee{
	{'a', 1, 1, 1},
	{'b', 1, 1, 1},
	{'c', 1, 1, 1},
	{'d', 1, 1, 1},
	{'e', 1, 1, 1},
	{'f', 1, 1, 1},
	{'g', 1, 1, 1},
	{'h', 1, 1, 1},
	{'i', 1, 1, 1},
	{'j', 1, 1, 1},
	{'k', 1, 1, 1},
	{'l', 1, 1, 1},
	{'m', 1, 1, 1},
	{'n', 1, 1, 1},
	{'o', 1, 1, 1},
	{'p', 1, 1, 1}}

	return shift, employees
}
